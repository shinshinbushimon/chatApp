要点
TCPプロトコル
operation == 1: 新規チャットの作成
operation == 2: 既存チャットへの新規参加以来

state == 0: リクエスト。特にクライアントからの新規チャット作成依頼に使用
state == 1: status code reply value is decimal：リクエストがいけたかどうかのコード
state == 2: サーバからの完了応答トークンを割り当てる

手順：
サーバは非ブロッキングで待ち受ける

case1: クライアントから新規チャット作成リクエスト
・サーバは、stateを1にし、ステータスコードを含むペイロードで即座に返信
・チャット名がまだ存在しない場合、stateを2にし、トークン文字列と作成したチャットメッセージをpayloadに含めて送信（チャットが存在する場合）

case2: クライアントからのチャット新規参加リクエスト
・サーバは、stateを1にし、ステータスコードを含むペイロードで即座に返信
・チャット名が存在する場合、stateを2にしてトークン文字列を生成し、チャット配列にユーザを追加


★★★ここから★★★
UDPプロトコル
メッセージの送信リクエストをクライアントから受け取る
形式：⇒room_size+token_size+payloads


★★★★クライアントのフロー★★★★
チャットの新規作成⇒サーバへ依頼をTCPパケットで送信
カスタムTCP⇒ | ChatNameLength: 1byte | Operation: 1byte | State: 1byte | Payload: 29byte |
Operationは1stateは常に0
サーバの応答が一定時間内場合、チャット作成に失敗したとメッセージを表示する
リクエストが受領された場合応答コードが来るのでそれを表示
完了したらそれも表示

チャットの新規参加⇒上と同様

チャットでのメッセージ依頼⇒サーバへ依頼とメッセージペイロードをUDPパケットで送信
カスタムUDP⇒ | ChatNameLength: 1byte | TokenLength: 1byte | Payload: 30byte |
サーバ側から一定時間応答がなければリクエストが失敗したメッセージを表示
サーバ側から応答があれば、その旨を表示

参考コード:
import asyncio
import socket

async def handle_tcp_client(reader, writer):
    data = await reader.read(100)
    message = data.decode()
    addr = writer.get_extra_info('peername')
    print(f"Received {message} from {addr}")
    writer.close()

async def run_udp_server():
    while True:
        data, addr = await loop.sock_recvfrom(udp_sock, 1024)
        print(f"Received {data.decode()} from {addr}")

async def main():
    server = await asyncio.start_server(
        handle_tcp_client, '127.0.0.1', 8888)

    addr = server.sockets[0].getsockname()
    print(f'Serving TCP on {addr}')

    global udp_sock
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.bind(('127.0.0.1', 9999))
    loop.create_task(run_udp_server())

    addr = udp_sock.getsockname()
    print(f'Serving UDP on {addr}')

    async with server:
        await server.serve_forever()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())

疑問点：⇒ayncioのPythonドキュメントを確認すること
・asyncioオブジェクトについて
・asyncio.start_serverではどのような処理が走っている？
・asyncio.get_event_loop()とは？
・loop.create_taskにudpタスクを追加することで
　内部でloopオブジェクトを通してudpパケット値としての
　値を取得できるのか？
・asyncio.open_connectionとは何か

残タスク：server側のudpを書いて、必要最低限のクライアントを
　　　　　実装して動確
　　　　　クライアントのリファクタリングをして動確して完了

        operation = 0or1で分けること




現時点での問題：
serverが正常に起動していない
asyncio.runに変えてから動作していない